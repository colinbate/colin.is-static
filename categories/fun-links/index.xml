<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fun Links on Colin Bate is...</title>
    <link>https://colin.is/categories/fun-links/</link>
    <description>Recent content in Fun Links on Colin Bate is...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Sep 2016 14:55:21 +0000</lastBuildDate>
    <atom:link href="https://colin.is/categories/fun-links/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Fun Links 2016-09-23</title>
      <link>https://colin.is/blog/2016/fun-links-2016-09-23/</link>
      <pubDate>Fri, 23 Sep 2016 14:55:21 +0000</pubDate>
      
      <guid>https://colin.is/blog/2016/fun-links-2016-09-23/</guid>
      <description>&lt;p&gt;Many technical people like to come up with overly complicated solutions to problems. Like writing an app that you may only need to use once or twice. Does this sound like you? It certainly sounds like me.&lt;/p&gt;

&lt;p&gt;A lot of the time, the reason is to challenge oneself. Or maybe it is because it is just plain enjoyable to procrastinate on real life while learning a new technology. Whatever the motivation, with today&amp;rsquo;s technology it doesn&amp;rsquo;t need to be a time-consuming process. More and more &amp;ldquo;apps&amp;rdquo; aren&amp;rsquo;t just big pieces of software written from the ground up. And I&amp;rsquo;m not just talking about microservices; I&amp;rsquo;m talking more about mashups and other hybrid applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Airtable&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://colin.fyi/QeE1&#34;&gt;https://airtable.com/&lt;/a&gt;&lt;br /&gt;
Have you ever found yourself using Google Sheets or Excel to manage a personal collection or otherwise organize things? Or perhaps thought you could use Google Sheets as a simple JSON API? If so you may find Airtable interesting. It sells itself as being simple as a spreadsheet. Essentially it is a nice UI around a set of build-it-yourself databases. The free plan is quite generous and should be more than enough for personal use. There is also an iOS app which lets you manage your data in a very convenient way while mobile. You can attach files/photos to your records through integration with cloud storage providers or directly from your computer or device. It even allows you to expose this data (both reading and writing) via a simple API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Zapier&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://colin.fyi/Fm5E&#34;&gt;https://zapier.com/&lt;/a&gt;&lt;br /&gt;
Zapier provides connections between different services and products which may not otherwise have them. It is a bit like a hub for integrations. You can create &amp;ldquo;zaps&amp;rdquo; which trigger based on something happening in one service (e.g. a Github PR) and then perform an action somewhere else (e.g. send a tweet). The free plan allows for simple one-to-one zaps, or you can pay for more complex workflows. The integrations available are quite extensive and target the productivity and business space. In particular, it has integrations with Airtable allowing you to trigger actions based on changes being made to your data or adding new data based on events elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IFTTT&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://colin.fyi/2LRO&#34;&gt;https://ifttt.com/&lt;/a&gt;&lt;br /&gt;
If This Then That is another service offering to perform actions on one service based on triggers from another. The service is free. However, the integrations seem to be geared more toward personal use and focus on the Internet of Things (IoT) space. Like you could set it up so that an email from a particular address might turn on your lights in your house. I think there is a lot of potential for this type of simple orchestration, if for no other reason than the geek factor.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun Links 2016-09-16</title>
      <link>https://colin.is/blog/2016/fun-links-2016-09-16/</link>
      <pubDate>Fri, 16 Sep 2016 17:11:07 +0000</pubDate>
      
      <guid>https://colin.is/blog/2016/fun-links-2016-09-16/</guid>
      <description>&lt;p&gt;To mark the occasion of the release of Angular 2 (finally), I thought that an Angular 2 themed set of links would be appropriate. And since I&amp;rsquo;ve been heavily steeped in React lately, it also gave me a chance to come up for air a little bit and see what is going on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular 2&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://angular.io&#34;&gt;https://angular.io&lt;/a&gt;&lt;br /&gt;
Can&amp;rsquo;t talk about Angular 2 without a link to the official page itself. This site is different to the one for Angular 1 and contains documentation and tutorials as you would expect. For those not subjected to my Angular 2 evangelism yet, it is a bit of a departure from its predecessor. It follows the more structured component-based approach which is very popular at the moment, and it brings some other technologies to the table with it. In particular takes particular advantage of TypeScript to support dependency injection and metadata. It also incorporates the concept of Observables via the &lt;code&gt;rxjs&lt;/code&gt; package. You don&amp;rsquo;t have to use either in your applications, but the community is embracing them, and both are quite powerful additions if you take the time to learn them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular 2 Courses @ Egghead&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://egghead.io/courses/building-angular-2-components&#34;&gt;https://egghead.io/courses/building-angular-2-components&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://egghead.io/courses/intro-to-angular-2-router&#34;&gt;https://egghead.io/courses/intro-to-angular-2-router&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://egghead.io/courses/angular-2-dependency-injection-di-explained&#34;&gt;https://egghead.io/courses/angular-2-dependency-injection-di-explained&lt;/a&gt;&lt;br /&gt;
Three links for the price of one. There are three new Angular 2 courses available at Egghead which are completely free, at least for the time being. So unless you have a Pro Egghead account, or would like to, then I&amp;rsquo;d recommend checking out those courses sooner rather than later if you want to learn about Angular 2. That said, I do recommend a Pro Egghead account if you are interested in learning about the hottest web technologies.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update: They are no longer free apart from the intro videos.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ng2-bootstrap&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://valor-software.com/ng2-bootstrap/&#34;&gt;http://valor-software.com/ng2-bootstrap/&lt;/a&gt;&lt;br /&gt;
Given the popularity of Bootstrap for quickly bringing a UI to life, I wanted to mention the library which brings Bootstrap to Angular 2 using components and doesn&amp;rsquo;t require any of the out-of-the-box Bootstrap JavaScript. It provides components for the usual suspects like the accordion, date picker, and tabs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun Links 2016-06-10</title>
      <link>https://colin.is/blog/2016/fun-links-2016-06-10/</link>
      <pubDate>Fri, 10 Jun 2016 15:04:11 +0000</pubDate>
      
      <guid>https://colin.is/blog/2016/fun-links-2016-06-10/</guid>
      <description>&lt;p&gt;Since I&amp;rsquo;m in the middle of delivering a React training course to some of my colleagues, I thought why not highlight something React-related.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m starting off with some React-inspired alternatives to React. The concept of virtual DOM comparisons and one-way data flow has become very popular in the JavaScript world, so there has been a slew of copycat libraries emerge. Some are almost drop-in replacements, others take the concepts and run in a different direction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inferno&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/trueadm/inferno&#34;&gt;https://github.com/trueadm/inferno&lt;/a&gt;&lt;br /&gt;
Inferno claims to be one of, if not &lt;em&gt;the&lt;/em&gt; fastest virtual DOM libraries out there. It does this by only &amp;ldquo;diffing&amp;rdquo; the parts of the DOM that are potentially dynamic. The result is a React-like library which performs even better on low-power devices like phones and tablets. It has a Babel plugin as well, so you can write your components using the same JSX syntax you may be familiar with, and have it compiled to optimized Inferno virtual DOM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React-lite&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/Lucifier129/react-lite&#34;&gt;https://github.com/Lucifier129/react-lite&lt;/a&gt;&lt;br /&gt;
React-lite is a drop-in replacement for React on the browser which optimizes for file size. It is less than 20% of the size of React. Obviously, it makes some sacrifices to do that, and certain development niceties of React didn&amp;rsquo;t make the cut, like PropTypes and support for the React dev-tools. It also doesn&amp;rsquo;t support rendering on the server. In all of these cases, you can use the full React if necessary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Preact&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://preactjs.com/&#34;&gt;https://preactjs.com/&lt;/a&gt;&lt;br /&gt;
Preact is a slightly less compatible, but even smaller version of React, weighing in at around 3kb when fully optimized. It only supports the newer ES2015 class and stateless components. It too is missing PropTypes, but otherwise is quite compatible with an extra compatibility package available if you need it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun Links 2016-06-03</title>
      <link>https://colin.is/blog/2016/fun-links-2016-06-03/</link>
      <pubDate>Fri, 03 Jun 2016 16:05:07 +0000</pubDate>
      
      <guid>https://colin.is/blog/2016/fun-links-2016-06-03/</guid>
      <description>&lt;p&gt;A bit more of a theme today, and that is diagnostic API/HTTP clients. I don&amp;rsquo;t want to call them REST clients because they are much more general than that. But sometimes that is what they call themselves, perhaps to capitalize on the jargon bonus.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Postman&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.getpostman.com/&#34;&gt;http://www.getpostman.com/&lt;/a&gt;&lt;br /&gt;
Postman is probably the most well known of this group. It started out as a Chrome plugin, but I see that there is now a Mac app as well. It allows you build customized HTTP requests to arbitrary URLs using any of the standard HTTP verbs like GET, POST, PUT, DELETE, etc. You can add headers and whatever content you need, and it will also help visualize your responses with coloring, folding, and other inspection features. Postman also allows you to create tests for each of the URLs you are accessing, making assertions on the response. You can run these tests from the command line using a companion tool called Newman. Free for use, although they do offer a team-oriented cloud offering at a reasonable price.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advanced REST Client&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://chromerestclient.appspot.com/&#34;&gt;https://chromerestclient.appspot.com/&lt;/a&gt;&lt;br /&gt;
The Advanced REST Client (or ARC) is another Chrome extension which provides similar functionality to Postman with a slightly different UI (and color palette). However, instead of using Chrome&amp;rsquo;s XMLHttpRequest client to make requests, it works over raw sockets, allowing it to bypass restrictions that Chrome imposed. It also supports connecting to WebSocket servers as well. ARC is free.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Paw&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://luckymarmot.com/paw&#34;&gt;https://luckymarmot.com/paw&lt;/a&gt;&lt;br /&gt;
Paw is Mac HTTP client that offers a full-featured suite of tools. It also can generate client code in various languages to call your APIs. It supports dynamic values in your requests which can come from previous responses; it can compute hashes; generate random values; all sorts of things which can help in your testing/debugging efforts. Probably the biggest problem with it is the price. Not free; $50.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun Links 2016-05-27</title>
      <link>https://colin.is/blog/2016/fun-links-2016-05-27/</link>
      <pubDate>Fri, 27 May 2016 13:09:56 +0000</pubDate>
      
      <guid>https://colin.is/blog/2016/fun-links-2016-05-27/</guid>
      <description>&lt;p&gt;Not as much of a theme today for the links. A collection of tools that I thought might be of interest.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DevDocs&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://devdocs.io/&#34;&gt;http://devdocs.io/&lt;/a&gt;&lt;br /&gt;
If you&amp;rsquo;ve ever used Dash on a Mac, DevDocs is a similar idea. A central place for technical documentation, with offline support and simple, quick search functionality. You can customize which docs you want to load, but unfortunately, MSDN isn&amp;rsquo;t an option at this point. Mostly web focused, so if that is your thing, this might be a great resource.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Allura&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://allura.apache.org/&#34;&gt;https://allura.apache.org/&lt;/a&gt;&lt;br /&gt;
Apache Allura is a software forge. That is to say, it is like a self-hosted GitHub. It has a wiki, issue tracking, forums, blogs and some other nice features in addition to managing code repositories. On that front, it supports Git, SVN and, with a plugin, Mercurial. It is written in Python and backed by MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GraphQL&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://graphql.org/&#34;&gt;http://graphql.org/&lt;/a&gt;&lt;br /&gt;
GraphQL is another one of the hot new technologies coming out of Facebook. It is a declarative, hierarchical query language and runtime which allows for more maintainable data access from your client applications (web, mobile, etc.) to your server. It essentially replaces REST and bespoke endpoints, being both less chatty and easier to maintain over time. Having seen examples of its use in an immutable application architecture, it certainly seems like a smart choice for some applications.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun Links 2016-05-20</title>
      <link>https://colin.is/blog/2016/fun-links-2016-05-20/</link>
      <pubDate>Fri, 20 May 2016 13:17:09 +0000</pubDate>
      
      <guid>https://colin.is/blog/2016/fun-links-2016-05-20/</guid>
      <description>&lt;p&gt;I know I&amp;rsquo;ve written about static sites before. I&amp;rsquo;ve linked to some site generators and some complementary services, and now I&amp;rsquo;m going to add simple, CDN-based hosting to that list.&lt;/p&gt;

&lt;p&gt;All of these services allow you publish a static site with a simple command, and all offer free plans.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Netlify&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.netlify.com&#34;&gt;https://www.netlify.com&lt;/a&gt;&lt;br /&gt;
Netlify seems like the most full featured of this batch, but that may or may not be a good thing. In addition to hosting static files, it will also build your site from the source material, integrating with your git repository if desired. It can generate Jekyll, Roots, and Hugo sites as well as run any build tools like Grunt or Gulp. They also offer API proxying, support for client-side routing and the ability to hook into third party OAuth2 providers. SSL is managed for you and included in all plans. The free plan allows a custom domain but adds a small callout to the bottom corner of your site/app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Surge&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://surge.sh/&#34;&gt;https://surge.sh/&lt;/a&gt;&lt;br /&gt;
Surge takes the approach of lowering the barrier to get something &amp;ldquo;out there&amp;rdquo; as quickly and simply as possible. Just type &lt;code&gt;surge&lt;/code&gt; and hit enter in your project directory and Surge will publish it under a &lt;code&gt;surge.sh&lt;/code&gt; subdomain. You can add your custom domain for free. However, Surge just hosts your static site; it won&amp;rsquo;t build it or do any proxying, etc. You can, of course, integrate the &lt;code&gt;surge&lt;/code&gt; NPM package into your existing CI process and have it publish your site once built. The free plan doesn&amp;rsquo;t allow SSL on custom domains, but it does on their subdomains so that you could use it as a simple static asset CDN for a site hosted elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PubStorm&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.pubstorm.com/&#34;&gt;https://www.pubstorm.com/&lt;/a&gt;&lt;br /&gt;
PubStorm is the new kid on this block. It is an offering from Nitrous, the creators the online IDE, presumably to create the whole farm-to-table type of experience. They only have a free plan at the moment, which allows you to host up to 10 separate sites with custom domains and SSL. They support version rollback and simple &lt;code&gt;pushState&lt;/code&gt; support to allow client-side routing. It looks like their future premium offering will add more features. They also work primarily through a command line interface and allow you to add collaborators so that other people can publish or rollback if that is how you work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun Links 2016-04-15</title>
      <link>https://colin.is/blog/2016/fun-links-2016-04-15/</link>
      <pubDate>Fri, 15 Apr 2016 18:13:20 +0000</pubDate>
      
      <guid>https://colin.is/blog/2016/fun-links-2016-04-15/</guid>
      <description>&lt;p&gt;BOTS! While the picture that forms in your head may vary when you hear that word, I suspect before too long it may become as common a term as social media is now. There is a proliferation of messaging bots at the moment. And as you may guess, that means a large number of services are popping up to enable the simple and convenient hosting, development and maintenance of your bots.&lt;/p&gt;

&lt;p&gt;The following are a sample of such services with various takes on the issue. Some even allow you to piece together a bot without any programming. We certainly have come a long way since the Eggdrop IRC bots of 20+ years ago.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chatfuel&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://chatfuel.com/&#34;&gt;https://chatfuel.com/&lt;/a&gt;&lt;br /&gt;
Chatfuel gives you the tools to build your bots without needing to program. You can hook up your data and leverage existing modules to create a bot to engage your customers. At the moment, it only supports &lt;a href=&#34;https://telegram.org/&#34;&gt;Telegram&lt;/a&gt;, but more providers are on the way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meya&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://meya.ai/&#34;&gt;https://meya.ai/&lt;/a&gt;&lt;br /&gt;
Meya is another bot host/platform which allows you to write your bots in Python and Node.js. It also has some built-in bot components. It also has integrations with other sites like Facebook and Trello to provide information to your bot in addition to a local datastore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Microsoft Bot Framework&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://dev.botframework.com/&#34;&gt;https://dev.botframework.com/&lt;/a&gt;&lt;br /&gt;
Microsoft is also jumping on the messaging bandwagon, with their Bot Framework. You can build your bots with Node.js or C#, and their SDK is open source. It provides connectors to SMS, Office 365 mail, Skype, Slack, and others.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun Links 2016-04-08</title>
      <link>https://colin.is/blog/2016/fun-links-2016-04-08/</link>
      <pubDate>Fri, 08 Apr 2016 17:34:53 +0000</pubDate>
      
      <guid>https://colin.is/blog/2016/fun-links-2016-04-08/</guid>
      <description>&lt;p&gt;Back in November, I wrote about &lt;a href=&#34;https://colin.is/blog/2015/fun-links-2015-11-13/&#34;&gt;reactive programming libraries&lt;/a&gt; for JavaScript. Today I&amp;rsquo;m going to write about some frameworks and libraries which sit on top of the reactive libraries and provide UI or application integration.&lt;/p&gt;

&lt;p&gt;Using these libraries you can write an app in a declarative manner and not have to worry about state management. Not every type of application benefits from this. At the moment, I&amp;rsquo;m working on a &lt;a href=&#34;https://github.com/colinbate/battleship&#34;&gt;game with reactive programming&lt;/a&gt;, which I think may work well. Whether or not it is always appropriate, it is a worthwhile concept to learn.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cycle.js&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://cycle.js.org/&#34;&gt;http://cycle.js.org/&lt;/a&gt;&lt;br /&gt;
Cycle.js attempts to model your application as pure data flow using reactive programming. It isolates a &lt;code&gt;main&lt;/code&gt; function for your logic and provides sources (inputs from the external world) and sinks (outputs/writes to the external world). It uses provided &lt;em&gt;drivers&lt;/em&gt; to handle the integration with things like the DOM, HTTP requests, Websockets, etc. You need to see examples to appreciate exactly how it works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Motorcycle.js&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/motorcyclejs/core&#34;&gt;https://github.com/motorcyclejs/core&lt;/a&gt;&lt;br /&gt;
Motorcycle.js is being created by the same guy (and the group of contributors) as Cycle.js, but as the name suggests, it is designed to be faster. Under the hood, it uses Most.js instead of RxJS and a more performant virtual DOM library. It uses the same concepts of sources, sinks, and drivers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yolk&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/garbles/yolk&#34;&gt;https://github.com/garbles/yolk&lt;/a&gt;&lt;br /&gt;
Yolk is meant to be a minimal API on top of RxJS and virtual DOM. It treats everything as an observable; even the properties passed into its React-like UI components. If you are familiar with React and RxJS, then you will be right at home with Yolk. Yolk is what I am using for my game.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun Links 2016-04-01</title>
      <link>https://colin.is/blog/2016/fun-links-2016-04-01/</link>
      <pubDate>Fri, 01 Apr 2016 13:16:20 +0000</pubDate>
      
      <guid>https://colin.is/blog/2016/fun-links-2016-04-01/</guid>
      <description>&lt;p&gt;It may be April Fool&amp;rsquo;s day, but these links are no joke. To be sure, I wrote this article on March 31st. ;) However, to mark the occasion, I&amp;rsquo;m going to have four links today instead of three. Mind blowing.&lt;/p&gt;

&lt;p&gt;My theme for these links is immutability. Specifically immutability in JavaScript. Arrays and objects, as well as the new &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;Set&lt;/code&gt; in JavaScript, are mutable. That is one can change their values and contents while maintaining a single reference to them. While this is a familiar concept for some, it sometimes has unintended side effects when these entities are passed around to different parts of the application.&lt;/p&gt;

&lt;p&gt;On the other hand programming with immutable data types requires a slightly different way of thinking about things, but offers benefits which make it valuable in certain applications.&lt;/p&gt;

&lt;p&gt;For example, change detection. If you want to know if a JavaScript array has changed, you could first check its length, but if they are the same, you&amp;rsquo;d have to iterate the whole array to determine if any element has changed. And even then, for mutable types within the array, you&amp;rsquo;d have to check those deeply as well. But if you have immutable types, then checking for a changed array is just a reference check which is much faster.&lt;/p&gt;

&lt;p&gt;Most of these libraries listed do very similar things but have different syntax, different performance and manage slightly different data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Immutable.js&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://facebook.github.io/immutable-js/&#34;&gt;https://facebook.github.io/immutable-js/&lt;/a&gt;&lt;br /&gt;
Immutable collections for JavaScript from Facebook. Instead of extending the native types, Immutable has its own collections: List, Map, OrderedMap, Seq, Stack, etc. They are all immutable and can be created from and cast back into native arrays and objects as necessary. The API, while a bit verbose, is clean and understandable. If you want some addition data and collection types in addition to immutability, then this is a good choice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mori&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/swannodette/mori&#34;&gt;https://github.com/swannodette/mori&lt;/a&gt;&lt;br /&gt;
Mori is designed to emulate ClojureScript&amp;rsquo;s persistent data structures in JS. As such it is decidedly more functional (stylistically) than the rest of the options. It supports many of the same data types as Immutable.js but claims to be faster (but larger). It has tried to make provisions for being closer to idiomatic JavaScript, but to be honest, it still feels a bit foreign. YMMV.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ancient Oak&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/brainshave/ancient-oak&#34;&gt;https://github.com/brainshave/ancient-oak&lt;/a&gt;&lt;br /&gt;
Ancient Oak dubs itself as the immutable tree. I like the name of this library the best, but that is judging a book by its cover. It is designed to work on trees of plain JS data types, something you might get from or convert to JSON. One of the types supported by Ancient Oak is the Date object, which isn&amp;rsquo;t something I&amp;rsquo;ve seen in any of the others. Allows you to use the types that you are used to in JS with pretty much the same API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Freezer&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/arqex/freezer&#34;&gt;https://github.com/arqex/freezer&lt;/a&gt;&lt;br /&gt;
Freezer is a bit like Ancient Oak in that it maintains an immutable tree structure, but it was built with React in mind, so it also has an event mechanism which allows you to re-render your application when the freezer has been updated. That said, it doesn&amp;rsquo;t seem to have immutable Date support. And having played with Freezer and Ancient Oak, the API seems a lot more pleasant and intuitive with the former.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun Links 2016-03-18</title>
      <link>https://colin.is/blog/2016/fun-links-2016-03-18/</link>
      <pubDate>Fri, 18 Mar 2016 15:48:28 +0000</pubDate>
      
      <guid>https://colin.is/blog/2016/fun-links-2016-03-18/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve &lt;a href=&#34;http://colin.is/blog/2013/fun-links-2013-09-27/&#34;&gt;mentioned Trello before&lt;/a&gt; as a personal productivity tool that many people use for managing software projects. I&amp;rsquo;ve used it myself for a few.&lt;/p&gt;

&lt;p&gt;Some people use the issue tracking tools provided by GitHub or Bitbucket to manage their tasks, and that works. But I prefer to leave those for bugs raised externally. Even working on my own, I find tools with workflows and drag and drop particularly pleasant to use. So I&amp;rsquo;ve compiled a list of some software project management services online which hopefully people will find useful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pivotal Tracker&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.pivotaltracker.com/&#34;&gt;http://www.pivotaltracker.com/&lt;/a&gt;&lt;br /&gt;
Pivotal Tracker aims to help you build better software faster. It is from the same folks who bring us the Jasmine JS testing library. From the looks of things, the tool has recently undergone a facelift which has people excited. They have a free plan which supports up to three collaborators and two private projects. Public projects are all free.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clubhouse&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://clubhouse.io/&#34;&gt;https://clubhouse.io/&lt;/a&gt;&lt;br /&gt;
Clubhouse is a newer player, and it was created to overcome frustrations its founders had with existing tools. It features the ability to zoom in and out of projects to see different levels of details at a glance. The free plan here also allows for three collaborators, but unlimited projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Favro&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://favro.com/&#34;&gt;https://favro.com/&lt;/a&gt;&lt;br /&gt;
Favro seems a bit more general purpose, similar to Trello, but looks like it would be quite capable of planning software development. Their free plan provides unlimited users and projects, but only a single service integration.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun Links 2016-03-11</title>
      <link>https://colin.is/blog/2016/fun-links-2016-03-11/</link>
      <pubDate>Fri, 11 Mar 2016 20:22:47 +0000</pubDate>
      
      <guid>https://colin.is/blog/2016/fun-links-2016-03-11/</guid>
      <description>&lt;p&gt;Dynamic programming languages and interpreted languages all have the benefit of being quick to use to write code. They have grown quite popular in the past years, driven mostly by the fluid nature of the web. The nebbish amongst us will usually lament the lack of static typing, but the genuine issue with these languages is usually quite simple: execution speed.&lt;/p&gt;

&lt;p&gt;So while they may be fast to write, they aren&amp;rsquo;t always fast to run.&lt;/p&gt;

&lt;p&gt;OK, that makes sense. And to be fair, that might be perfectly acceptable in some cases, and clearly people were accepting this trade-off for a while. And no matter how provocative you find pointer dereferencing to be, you can&amp;rsquo;t argue that languages like Ruby, Python and PHP aren&amp;rsquo;t in vogue. Whether the syntax, the high-level abstractions or the dynamic features mentioned before, each has a little &amp;ldquo;je ne sais quoi&amp;rdquo; about them.&lt;/p&gt;

&lt;p&gt;So you love your language, but it isn&amp;rsquo;t quite what you need, what do you do? You create a new language with the same basic syntax and make it better. At least in theory. The following languages make look a bit niche at the moment, but it is worth keeping an eye on them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Crystal&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://crystal-lang.org/&#34;&gt;http://crystal-lang.org/&lt;/a&gt;&lt;br /&gt;
Crystal is like Ruby, only faster. Developed by a company in Argentina, there seems to be a growing community around the new language. Unlike Ruby, Crystal is a compiled language, so you create a native executable. It also has a package/module management system called &lt;code&gt;shard&lt;/code&gt;. At the moment, it looks like it only runs on Linux or Mac, and given how the Ruby community regards Windows, I wouldn&amp;rsquo;t hold my breath for a native compiler there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Julia&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://julialang.org/&#34;&gt;http://julialang.org/&lt;/a&gt;&lt;br /&gt;
Julia is the upgraded, faster version of Python. Sort of. The syntax is certainly Python inspired, and built with data and scientific processing in mind. Looking at the summary of features and benchmark results, it seems like the best of all worlds as a language. It has a package manager as well and even built-in support for parallelism and distributed computing. Not surprising given its focus on technical computing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hack&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://hacklang.org/&#34;&gt;http://hacklang.org/&lt;/a&gt;&lt;br /&gt;
Hack is Facebook&amp;rsquo;s enhanced version of PHP. Supposedly they couldn&amp;rsquo;t think of a woman&amp;rsquo;s name to use. And while the name they did choose may invoke some concern, the language moves in a more &amp;ldquo;safe&amp;rdquo; direction from its origins. Hack requires a runtime called HHVM, and at the moment, is only available on Linux. You could run it from a VM for development locally. It adds things like types and native XML support to the PHP language, and they even have tools for converting from PHP to Hack.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun Links 2016-03-04</title>
      <link>https://colin.is/blog/2016/fun-links-2016-03-04/</link>
      <pubDate>Fri, 04 Mar 2016 14:59:40 +0000</pubDate>
      
      <guid>https://colin.is/blog/2016/fun-links-2016-03-04/</guid>
      <description>&lt;p&gt;Today I&amp;rsquo;m revisiting microservices, but from a slightly different angle. While I still don&amp;rsquo;t believe microservices are a panacea, they certainly have a place in today&amp;rsquo;s technical ecosystem. If you aren&amp;rsquo;t going down the &lt;a href=&#34;https://colin.is/blog/2015/fun-links-2015-11-06/&#34;&gt;microservices as a service route&lt;/a&gt; that I mentioned before, then you will likely need to consider how to deploy and orchestrate your microservices, whether that is in-house or in-cloud.&lt;/p&gt;

&lt;p&gt;The whole concept of microservices just moves where the technical challenges lie, and in this case, pushes extra challenges into the territory of DevOps and Infrastructure. As such I&amp;rsquo;m listing some tools which are designed to help out in that area.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Giant Swarm&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://giantswarm.io/&#34;&gt;https://giantswarm.io/&lt;/a&gt;&lt;br /&gt;
Giant Swarm is a company which provides support for microservice deployment. They provide professional support/consulting services as well as publishing several open source tools used in the deployment and orchestration of microservices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Claudia&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/claudiajs/claudia&#34;&gt;https://github.com/claudiajs/claudia&lt;/a&gt;&lt;br /&gt;
Claudia is a tool that takes the pain out of deploying Node.js microservices to AWS. It allows you to get something up and running quickly without the hassles associated with AWS Lambda and API Gateway directly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;linkerd&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://linkerd.io/&#34;&gt;https://linkerd.io/&lt;/a&gt;&lt;br /&gt;
Linkerd touts itself as a modern RPC proxy for microservices. It sits near your application and provides abstractions for service discovery and load balances and instruments your remote services. This functionality allows you to make infrastructure and architecture changes without modifying application code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In other news&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/blog/release/v5.7.0/&#34;&gt;Node 5.7.0 is released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hook.io/blog/role-based-access-control&#34;&gt;Hook.io adds extra security, API keys and ES7 support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Fun Links 2016-02-26</title>
      <link>https://colin.is/blog/2016/fun-links-2016-02-26/</link>
      <pubDate>Fri, 26 Feb 2016 18:46:58 +0000</pubDate>
      
      <guid>https://colin.is/blog/2016/fun-links-2016-02-26/</guid>
      <description>&lt;p&gt;Today my links fall into the category of &amp;ldquo;dev tools&amp;rdquo;. Some may even lean into the &amp;ldquo;DevOps&amp;rdquo; territory. They are all language agnostic but mostly focus on web applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LaunchDarkly&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://launchdarkly.com/&#34;&gt;https://launchdarkly.com/&lt;/a&gt;&lt;br /&gt;
LaunchDarkly calls itself &amp;ldquo;feature flags as a service&amp;rdquo; which seems like as good a description as any. It is a service that you integrate with your web application to allow you to roll out new features slowly, tracking the results. You can use it to do A/B testing, beta releases, or even to provide premium features to some users. Essentially, a formalized means to provide feature toggling through a nice UI. Most big sites build their applications this way; with new, in-development, code deployed for weeks or months before it is ready to be turned on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;StopLight&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://stoplight.io/&#34;&gt;https://stoplight.io/&lt;/a&gt;&lt;br /&gt;
StopLight is an API design and testing service. It provides visual tools to build your API and can export the specification in a few different formats including the popular Open API Initiative (Swagger) format. Also, it can also be used to make calls into your existing API as a test client. And it can use Prism to record and playback or mock out an API for testing as a test server. All said a full feature API toolkit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;diff-so-fancy&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/so-fancy/diff-so-fancy&#34;&gt;https://github.com/so-fancy/diff-so-fancy&lt;/a&gt;&lt;br /&gt;
Who says appearances don&amp;rsquo;t matter? If you are looking to tidy (and fancy) up your git diffs, then you need &lt;code&gt;diff-so-fancy&lt;/code&gt;. It is a visual filter which builds on other tools to provide in-line character diff highlighting and better file separation. You can use diff-so-fancy once-off, or set it as your default for all diffs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun Links 2016-02-12</title>
      <link>https://colin.is/blog/2016/fun-links-2016-02-12/</link>
      <pubDate>Fri, 12 Feb 2016 17:27:36 +0000</pubDate>
      
      <guid>https://colin.is/blog/2016/fun-links-2016-02-12/</guid>
      <description>&lt;p&gt;There are many things about which developers can get quite passionate and even defensive. We are a strongly opinionated lot. There are some classic examples: brace style, emacs vs. vi, any language vs. any other language. It boils down to personal preference in the end.&lt;/p&gt;

&lt;p&gt;Another area where personal preference and passion can come into play is with coding fonts. I love typography, and the inherent challenges of creating (or finding) the perfect coding typeface is exciting. However, I find at least personally, that I&amp;rsquo;ll spend some time searching for an excellent coding font, settle on something for a period and then start searching all over again.&lt;/p&gt;

&lt;p&gt;This restlessness is akin to some people needing to rearrange their living space or their workspace occasionally. Because as a software developer, nothing is as &amp;ldquo;in your face&amp;rdquo;, aesthetically speaking, as your coding font.&lt;/p&gt;

&lt;p&gt;However, evaluating a coding typeface is not an entirely subjective experience, there are some more objective things we can evaluate. Glyph coverage (how many different characters the font renders) is a good one if you have any needs for Unicode support or writing in anything other than English. Another is how well the font distinguishes various character groups: &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;O&lt;/code&gt;; &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;; &lt;code&gt;,&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; for example. Check for the position, size and shape of the symbols and operators that you use often. Do they work well with each other? Does it support multiple weights? Is there a separately designed italic version? All things to consider.&lt;/p&gt;

&lt;p&gt;Below is a short list of fonts which I use, or have recently used, with the usual brief description. I&amp;rsquo;ll also throw in a list of alternatives because I recognize that not everyone has the same criteria for choosing a typeface. Before I do that, I will mention of course that there are a couple of standard monospaced fonts included with most operating systems, like Courier New, Consolas, Monaco, Menlo and Bitstream Vera Sans Mono.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Monoid&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://larsenwork.com/monoid/&#34;&gt;http://larsenwork.com/monoid/&lt;/a&gt;&lt;br /&gt;
Monoid is my new font interest as it supports coding ligatures. Ligatures take two or more characters which often appear together and combine them into a single glyph. So Monoid can take your &lt;code&gt;=&amp;gt;&lt;/code&gt; operator for example and replace it with a proper double arrow. Apart from this, it has a nice large x-height and prominent punctuation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Envy Code R&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://damieng.com/blog/2008/05/26/envy-code-r-preview-7-coding-font-released&#34;&gt;https://damieng.com/blog/2008/05/26/envy-code-r-preview-7-coding-font-released&lt;/a&gt;&lt;br /&gt;
Envy Code R has been my Visual Studio font of choice for many years. It has a nice tall x-height and looks good without anti-aliasing. The particularly nice thing about it for Visual Studio was that it has a specific version which treats &amp;ldquo;bold&amp;rdquo; as &amp;ldquo;italic&amp;rdquo; because Visual Studio used only to let you specify whether a font was bold for certain syntax colourings. I preferred to have italics in my source rather than bold.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input Mono&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://input.fontbureau.com/&#34;&gt;http://input.fontbureau.com/&lt;/a&gt;&lt;br /&gt;
Input Mono is a member of a family of three typefaces all using the same basic form. A nice clean shape, it has many weights and styles and allows you to customize some of your letterforms, so you can get the look that you like. The Serif and Sans versions of this font are good for things like Markdown documents where alignment isn&amp;rsquo;t so important.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Others&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inconsolata (&lt;a href=&#34;https://www.google.com/fonts/specimen/Inconsolata&#34;&gt;https://www.google.com/fonts/specimen/Inconsolata&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fira Code (&lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;https://github.com/tonsky/FiraCode&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Source Code Pro (&lt;a href=&#34;https://www.google.com/fonts/specimen/Source+Code+Pro&#34;&gt;https://www.google.com/fonts/specimen/Source+Code+Pro&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Hack (&lt;a href=&#34;http://sourcefoundry.org/hack/&#34;&gt;http://sourcefoundry.org/hack/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Roboto Mono (&lt;a href=&#34;https://www.google.com/fonts/specimen/Roboto+Mono&#34;&gt;https://www.google.com/fonts/specimen/Roboto+Mono&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Anonymous Pro (&lt;a href=&#34;https://www.google.com/fonts/specimen/Anonymous+Pro&#34;&gt;https://www.google.com/fonts/specimen/Anonymous+Pro&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Profont (&lt;a href=&#34;http://tobiasjung.name/profont/&#34;&gt;http://tobiasjung.name/profont/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Proggy (&lt;a href=&#34;http://www.proggyfonts.net/&#34;&gt;http://www.proggyfonts.net/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;PragmataPro (&lt;a href=&#34;http://www.fsd.it/shop/fonts/pragmatapro/&#34;&gt;http://www.fsd.it/shop/fonts/pragmatapro/&lt;/a&gt;) (not free)&lt;/li&gt;
&lt;li&gt;Fantasque Sans Mono (&lt;a href=&#34;https://github.com/belluzj/fantasque-sans&#34;&gt;https://github.com/belluzj/fantasque-sans&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;M+ (&lt;a href=&#34;https://mplus-fonts.osdn.jp/about-en.html&#34;&gt;https://mplus-fonts.osdn.jp/about-en.html&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Fun Links 2016-01-29</title>
      <link>https://colin.is/blog/2016/fun-links-2016-01-29/</link>
      <pubDate>Fri, 29 Jan 2016 15:43:39 +0000</pubDate>
      
      <guid>https://colin.is/blog/2016/fun-links-2016-01-29/</guid>
      <description>&lt;p&gt;Since tomorrow is my son&amp;rsquo;s third birthday, I&amp;rsquo;d say it is high time he starts to learn to program. I need him (l)earning ASAP. A common goal for any geeky parent, but how do you go about it?&lt;/p&gt;

&lt;p&gt;Below are some educational tools and resources aimed at teaching programming whether to someone very young or anyone in general. And even if you know how to program already, the learning never stops.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ABC++&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://inedo.com/abc&#34;&gt;http://inedo.com/abc&lt;/a&gt;&lt;br /&gt;
ABC++ is a book published by the same team who created ProGet and BuildMaster two great .NET-focused DevOps tools. On one hand it is an ordinary alphabet book for teaching kids their letters, on the other hand, it is a list of programming languages with code samples. The site has a link to Amazon where you can get the book for about $12 USD, but the content of the book is available on the site as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Codecademy&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.codecademy.com&#34;&gt;https://www.codecademy.com&lt;/a&gt;&lt;br /&gt;
Codecademy doesn&amp;rsquo;t target children per se, but I suspect older kids would be able to complete some of their courses. They aim to teach the world to program, and they are taking a fresh look at education in the digital age. They have courses on web technologies as well as Python, Ruby, and Java. You can even learn about Git or SQL. The learning catalog is free, but they have a pro account with more tooling around tailoring a custom solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scratch&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://scratch.mit.edu/&#34;&gt;https://scratch.mit.edu/&lt;/a&gt;&lt;br /&gt;
Scratch is a partly a programming language, partly a community. It targets kids from 8 to 16 and was created by a group from MIT. It is free of charge. It does require Flash in your browser though to use the visual editor. It looks like a fun system to teach concepts to kids through fun and engaging projects.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>